<?php
/**
 * ChargeApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Elepay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * elepay API リファレンス
 *
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@elestyle.jp
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Elepay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Elepay\ApiException;
use Elepay\Configuration;
use Elepay\HeaderSelector;
use Elepay\ObjectSerializer;

/**
 * ChargeApi Class Doc Comment
 *
 * @category Class
 * @package  Elepay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ChargeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'captureCharge' => [
            'application/json;charset=utf-8',
        ],
        'createCharge' => [
            'application/json;charset=utf-8',
        ],
        'listCharges' => [
            'application/json',
        ],
        'retrieveCharge' => [
            'application/json',
        ],
        'retrieveChargeStatus' => [
            'application/json',
        ],
        'revokeCharge' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation captureCharge
     *
     * Capture charge
     *
     * @param  string $id Charge ID (required)
     * @param  \Elepay\Model\ChargeCaptureReq $chargeCaptureReq chargeCaptureReq (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['captureCharge'] to see the possible values for this operation
     *
     * @throws \Elepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Elepay\Model\ChargeDto
     */
    public function captureCharge($id, $chargeCaptureReq = null, string $contentType = self::contentTypes['captureCharge'][0])
    {
        list($response) = $this->captureChargeWithHttpInfo($id, $chargeCaptureReq, $contentType);
        return $response;
    }

    /**
     * Operation captureChargeWithHttpInfo
     *
     * Capture charge
     *
     * @param  string $id Charge ID (required)
     * @param  \Elepay\Model\ChargeCaptureReq $chargeCaptureReq (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['captureCharge'] to see the possible values for this operation
     *
     * @throws \Elepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Elepay\Model\ChargeDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function captureChargeWithHttpInfo($id, $chargeCaptureReq = null, string $contentType = self::contentTypes['captureCharge'][0])
    {
        $request = $this->captureChargeRequest($id, $chargeCaptureReq, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Elepay\Model\ChargeDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Elepay\Model\ChargeDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Elepay\Model\ChargeDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Elepay\Model\ChargeDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Elepay\Model\ChargeDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation captureChargeAsync
     *
     * Capture charge
     *
     * @param  string $id Charge ID (required)
     * @param  \Elepay\Model\ChargeCaptureReq $chargeCaptureReq (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['captureCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureChargeAsync($id, $chargeCaptureReq = null, string $contentType = self::contentTypes['captureCharge'][0])
    {
        return $this->captureChargeAsyncWithHttpInfo($id, $chargeCaptureReq, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation captureChargeAsyncWithHttpInfo
     *
     * Capture charge
     *
     * @param  string $id Charge ID (required)
     * @param  \Elepay\Model\ChargeCaptureReq $chargeCaptureReq (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['captureCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureChargeAsyncWithHttpInfo($id, $chargeCaptureReq = null, string $contentType = self::contentTypes['captureCharge'][0])
    {
        $returnType = '\Elepay\Model\ChargeDto';
        $request = $this->captureChargeRequest($id, $chargeCaptureReq, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'captureCharge'
     *
     * @param  string $id Charge ID (required)
     * @param  \Elepay\Model\ChargeCaptureReq $chargeCaptureReq (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['captureCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function captureChargeRequest($id, $chargeCaptureReq = null, string $contentType = self::contentTypes['captureCharge'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling captureCharge'
            );
        }



        $resourcePath = '/charges/{id}/capture';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($chargeCaptureReq)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($chargeCaptureReq));
            } else {
                $httpBody = $chargeCaptureReq;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCharge
     *
     * Create charge
     *
     * @param  \Elepay\Model\ChargeReq $chargeReq 支払リクエスト (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCharge'] to see the possible values for this operation
     *
     * @throws \Elepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Elepay\Model\ChargeDto
     */
    public function createCharge($chargeReq, string $contentType = self::contentTypes['createCharge'][0])
    {
        list($response) = $this->createChargeWithHttpInfo($chargeReq, $contentType);
        return $response;
    }

    /**
     * Operation createChargeWithHttpInfo
     *
     * Create charge
     *
     * @param  \Elepay\Model\ChargeReq $chargeReq 支払リクエスト (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCharge'] to see the possible values for this operation
     *
     * @throws \Elepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Elepay\Model\ChargeDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createChargeWithHttpInfo($chargeReq, string $contentType = self::contentTypes['createCharge'][0])
    {
        $request = $this->createChargeRequest($chargeReq, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Elepay\Model\ChargeDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Elepay\Model\ChargeDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Elepay\Model\ChargeDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Elepay\Model\ChargeDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Elepay\Model\ChargeDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createChargeAsync
     *
     * Create charge
     *
     * @param  \Elepay\Model\ChargeReq $chargeReq 支払リクエスト (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createChargeAsync($chargeReq, string $contentType = self::contentTypes['createCharge'][0])
    {
        return $this->createChargeAsyncWithHttpInfo($chargeReq, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createChargeAsyncWithHttpInfo
     *
     * Create charge
     *
     * @param  \Elepay\Model\ChargeReq $chargeReq 支払リクエスト (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createChargeAsyncWithHttpInfo($chargeReq, string $contentType = self::contentTypes['createCharge'][0])
    {
        $returnType = '\Elepay\Model\ChargeDto';
        $request = $this->createChargeRequest($chargeReq, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCharge'
     *
     * @param  \Elepay\Model\ChargeReq $chargeReq 支払リクエスト (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createChargeRequest($chargeReq, string $contentType = self::contentTypes['createCharge'][0])
    {

        // verify the required parameter 'chargeReq' is set
        if ($chargeReq === null || (is_array($chargeReq) && count($chargeReq) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chargeReq when calling createCharge'
            );
        }


        $resourcePath = '/charges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($chargeReq)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($chargeReq));
            } else {
                $httpBody = $chargeReq;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCharges
     *
     * List charges
     *
     * @param  \Elepay\Model\PaymentMethodType[] $paymentMethod 決済方法(複数の指定が可能です) (optional)
     * @param  int $from 開始時間（UTC）。指定した時間以降に作成されたデータを取得します。 (optional)
     * @param  int $to 終了時間（UTC）。指定した時間以前に作成されたデータを取得します (optional)
     * @param  ChargeDateTimeType $dateField 開始時間と終了時間の項目を指定します。 - paid_time 払う時間 - create_time 決済新規時間 (optional)
     * @param  ChargeStatusType $status 支払状況 (optional)
     * @param  int $limit 最大件数 (optional, default to 20)
     * @param  int $offset 検索開始位置 (optional, default to 0)
     * @param  ChargeDateTimeType $sort ソート項目 - paid_time 払う時間 - create_time 決済新規時間 (optional)
     * @param  SortOrderType $order ソート順 - desc 降順 - asc 昇順 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCharges'] to see the possible values for this operation
     *
     * @throws \Elepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Elepay\Model\ChargesResponse
     */
    public function listCharges($paymentMethod = null, $from = null, $to = null, $dateField = null, $status = null, $limit = 20, $offset = 0, $sort = null, $order = null, string $contentType = self::contentTypes['listCharges'][0])
    {
        list($response) = $this->listChargesWithHttpInfo($paymentMethod, $from, $to, $dateField, $status, $limit, $offset, $sort, $order, $contentType);
        return $response;
    }

    /**
     * Operation listChargesWithHttpInfo
     *
     * List charges
     *
     * @param  \Elepay\Model\PaymentMethodType[] $paymentMethod 決済方法(複数の指定が可能です) (optional)
     * @param  int $from 開始時間（UTC）。指定した時間以降に作成されたデータを取得します。 (optional)
     * @param  int $to 終了時間（UTC）。指定した時間以前に作成されたデータを取得します (optional)
     * @param  ChargeDateTimeType $dateField 開始時間と終了時間の項目を指定します。 - paid_time 払う時間 - create_time 決済新規時間 (optional)
     * @param  ChargeStatusType $status 支払状況 (optional)
     * @param  int $limit 最大件数 (optional, default to 20)
     * @param  int $offset 検索開始位置 (optional, default to 0)
     * @param  ChargeDateTimeType $sort ソート項目 - paid_time 払う時間 - create_time 決済新規時間 (optional)
     * @param  SortOrderType $order ソート順 - desc 降順 - asc 昇順 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCharges'] to see the possible values for this operation
     *
     * @throws \Elepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Elepay\Model\ChargesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listChargesWithHttpInfo($paymentMethod = null, $from = null, $to = null, $dateField = null, $status = null, $limit = 20, $offset = 0, $sort = null, $order = null, string $contentType = self::contentTypes['listCharges'][0])
    {
        $request = $this->listChargesRequest($paymentMethod, $from, $to, $dateField, $status, $limit, $offset, $sort, $order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Elepay\Model\ChargesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Elepay\Model\ChargesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Elepay\Model\ChargesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Elepay\Model\ChargesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Elepay\Model\ChargesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listChargesAsync
     *
     * List charges
     *
     * @param  \Elepay\Model\PaymentMethodType[] $paymentMethod 決済方法(複数の指定が可能です) (optional)
     * @param  int $from 開始時間（UTC）。指定した時間以降に作成されたデータを取得します。 (optional)
     * @param  int $to 終了時間（UTC）。指定した時間以前に作成されたデータを取得します (optional)
     * @param  ChargeDateTimeType $dateField 開始時間と終了時間の項目を指定します。 - paid_time 払う時間 - create_time 決済新規時間 (optional)
     * @param  ChargeStatusType $status 支払状況 (optional)
     * @param  int $limit 最大件数 (optional, default to 20)
     * @param  int $offset 検索開始位置 (optional, default to 0)
     * @param  ChargeDateTimeType $sort ソート項目 - paid_time 払う時間 - create_time 決済新規時間 (optional)
     * @param  SortOrderType $order ソート順 - desc 降順 - asc 昇順 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCharges'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listChargesAsync($paymentMethod = null, $from = null, $to = null, $dateField = null, $status = null, $limit = 20, $offset = 0, $sort = null, $order = null, string $contentType = self::contentTypes['listCharges'][0])
    {
        return $this->listChargesAsyncWithHttpInfo($paymentMethod, $from, $to, $dateField, $status, $limit, $offset, $sort, $order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listChargesAsyncWithHttpInfo
     *
     * List charges
     *
     * @param  \Elepay\Model\PaymentMethodType[] $paymentMethod 決済方法(複数の指定が可能です) (optional)
     * @param  int $from 開始時間（UTC）。指定した時間以降に作成されたデータを取得します。 (optional)
     * @param  int $to 終了時間（UTC）。指定した時間以前に作成されたデータを取得します (optional)
     * @param  ChargeDateTimeType $dateField 開始時間と終了時間の項目を指定します。 - paid_time 払う時間 - create_time 決済新規時間 (optional)
     * @param  ChargeStatusType $status 支払状況 (optional)
     * @param  int $limit 最大件数 (optional, default to 20)
     * @param  int $offset 検索開始位置 (optional, default to 0)
     * @param  ChargeDateTimeType $sort ソート項目 - paid_time 払う時間 - create_time 決済新規時間 (optional)
     * @param  SortOrderType $order ソート順 - desc 降順 - asc 昇順 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCharges'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listChargesAsyncWithHttpInfo($paymentMethod = null, $from = null, $to = null, $dateField = null, $status = null, $limit = 20, $offset = 0, $sort = null, $order = null, string $contentType = self::contentTypes['listCharges'][0])
    {
        $returnType = '\Elepay\Model\ChargesResponse';
        $request = $this->listChargesRequest($paymentMethod, $from, $to, $dateField, $status, $limit, $offset, $sort, $order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCharges'
     *
     * @param  \Elepay\Model\PaymentMethodType[] $paymentMethod 決済方法(複数の指定が可能です) (optional)
     * @param  int $from 開始時間（UTC）。指定した時間以降に作成されたデータを取得します。 (optional)
     * @param  int $to 終了時間（UTC）。指定した時間以前に作成されたデータを取得します (optional)
     * @param  ChargeDateTimeType $dateField 開始時間と終了時間の項目を指定します。 - paid_time 払う時間 - create_time 決済新規時間 (optional)
     * @param  ChargeStatusType $status 支払状況 (optional)
     * @param  int $limit 最大件数 (optional, default to 20)
     * @param  int $offset 検索開始位置 (optional, default to 0)
     * @param  ChargeDateTimeType $sort ソート項目 - paid_time 払う時間 - create_time 決済新規時間 (optional)
     * @param  SortOrderType $order ソート順 - desc 降順 - asc 昇順 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCharges'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listChargesRequest($paymentMethod = null, $from = null, $to = null, $dateField = null, $status = null, $limit = 20, $offset = 0, $sort = null, $order = null, string $contentType = self::contentTypes['listCharges'][0])
    {






        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ChargeApi.listCharges, must be smaller than or equal to 100.');
        }
        




        $resourcePath = '/charges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentMethod,
            'paymentMethod', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateField,
            'dateField', // param base name
            'ChargeDateTimeType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'ChargeStatusType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'ChargeDateTimeType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'SortOrderType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveCharge
     *
     * Retrieve charge
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveCharge'] to see the possible values for this operation
     *
     * @throws \Elepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Elepay\Model\ChargeDto
     */
    public function retrieveCharge($id, string $contentType = self::contentTypes['retrieveCharge'][0])
    {
        list($response) = $this->retrieveChargeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation retrieveChargeWithHttpInfo
     *
     * Retrieve charge
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveCharge'] to see the possible values for this operation
     *
     * @throws \Elepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Elepay\Model\ChargeDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveChargeWithHttpInfo($id, string $contentType = self::contentTypes['retrieveCharge'][0])
    {
        $request = $this->retrieveChargeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Elepay\Model\ChargeDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Elepay\Model\ChargeDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Elepay\Model\ChargeDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Elepay\Model\ChargeDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Elepay\Model\ChargeDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveChargeAsync
     *
     * Retrieve charge
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveChargeAsync($id, string $contentType = self::contentTypes['retrieveCharge'][0])
    {
        return $this->retrieveChargeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveChargeAsyncWithHttpInfo
     *
     * Retrieve charge
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveChargeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['retrieveCharge'][0])
    {
        $returnType = '\Elepay\Model\ChargeDto';
        $request = $this->retrieveChargeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveCharge'
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveChargeRequest($id, string $contentType = self::contentTypes['retrieveCharge'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling retrieveCharge'
            );
        }


        $resourcePath = '/charges/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveChargeStatus
     *
     * Retrieve charge&#39;s status
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveChargeStatus'] to see the possible values for this operation
     *
     * @throws \Elepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Elepay\Model\ChargeStatusDto
     */
    public function retrieveChargeStatus($id, string $contentType = self::contentTypes['retrieveChargeStatus'][0])
    {
        list($response) = $this->retrieveChargeStatusWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation retrieveChargeStatusWithHttpInfo
     *
     * Retrieve charge&#39;s status
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveChargeStatus'] to see the possible values for this operation
     *
     * @throws \Elepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Elepay\Model\ChargeStatusDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveChargeStatusWithHttpInfo($id, string $contentType = self::contentTypes['retrieveChargeStatus'][0])
    {
        $request = $this->retrieveChargeStatusRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Elepay\Model\ChargeStatusDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Elepay\Model\ChargeStatusDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Elepay\Model\ChargeStatusDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Elepay\Model\ChargeStatusDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Elepay\Model\ChargeStatusDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveChargeStatusAsync
     *
     * Retrieve charge&#39;s status
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveChargeStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveChargeStatusAsync($id, string $contentType = self::contentTypes['retrieveChargeStatus'][0])
    {
        return $this->retrieveChargeStatusAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveChargeStatusAsyncWithHttpInfo
     *
     * Retrieve charge&#39;s status
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveChargeStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveChargeStatusAsyncWithHttpInfo($id, string $contentType = self::contentTypes['retrieveChargeStatus'][0])
    {
        $returnType = '\Elepay\Model\ChargeStatusDto';
        $request = $this->retrieveChargeStatusRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveChargeStatus'
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveChargeStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveChargeStatusRequest($id, string $contentType = self::contentTypes['retrieveChargeStatus'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling retrieveChargeStatus'
            );
        }


        $resourcePath = '/charges/{id}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation revokeCharge
     *
     * Revoke charge
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeCharge'] to see the possible values for this operation
     *
     * @throws \Elepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Elepay\Model\ChargeDto
     */
    public function revokeCharge($id, string $contentType = self::contentTypes['revokeCharge'][0])
    {
        list($response) = $this->revokeChargeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation revokeChargeWithHttpInfo
     *
     * Revoke charge
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeCharge'] to see the possible values for this operation
     *
     * @throws \Elepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Elepay\Model\ChargeDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeChargeWithHttpInfo($id, string $contentType = self::contentTypes['revokeCharge'][0])
    {
        $request = $this->revokeChargeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Elepay\Model\ChargeDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Elepay\Model\ChargeDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Elepay\Model\ChargeDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Elepay\Model\ChargeDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Elepay\Model\ChargeDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation revokeChargeAsync
     *
     * Revoke charge
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeChargeAsync($id, string $contentType = self::contentTypes['revokeCharge'][0])
    {
        return $this->revokeChargeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeChargeAsyncWithHttpInfo
     *
     * Revoke charge
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeChargeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['revokeCharge'][0])
    {
        $returnType = '\Elepay\Model\ChargeDto';
        $request = $this->revokeChargeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revokeCharge'
     *
     * @param  string $id Charge ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function revokeChargeRequest($id, string $contentType = self::contentTypes['revokeCharge'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling revokeCharge'
            );
        }


        $resourcePath = '/charges/{id}/revoke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=utf-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
