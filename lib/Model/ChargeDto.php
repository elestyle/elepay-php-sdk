<?php
/**
 * ChargeDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Elepay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * elepay API リファレンス
 *
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@elestyle.jp
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Elepay\Model;

use \ArrayAccess;
use \Elepay\ObjectSerializer;

/**
 * ChargeDto Class Doc Comment
 *
 * @category Class
 * @description 支払いオブジェクト
 * @package  Elepay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChargeDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChargeDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'appId' => 'string',
        'object' => 'string',
        'liveMode' => 'bool',
        'amount' => 'int',
        'authorizeAmount' => 'int',
        'currency' => 'string',
        'authorize' => 'bool',
        'paymentMethod' => '\Elepay\Model\PaymentMethodType',
        'resource' => '\Elepay\Model\ResourceType',
        'orderNo' => 'string',
        'description' => 'string',
        'extra' => 'array<string,string>',
        'metadata' => 'array<string,string>',
        'cardInfo' => '\Elepay\Model\CardInfo',
        'voucherNo' => 'string',
        'clientIp' => 'string',
        'paid' => 'bool',
        'refunded' => 'bool',
        'disputed' => 'bool',
        'refunds' => '\Elepay\Model\RefundsDto',
        'status' => '\Elepay\Model\ChargeStatusType',
        'codeContent' => 'string',
        'credential' => 'string',
        'paidTime' => 'int',
        'refundTime' => 'int',
        'expiryTime' => 'int',
        'settleTime' => 'int',
        'createTime' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'appId' => null,
        'object' => null,
        'liveMode' => null,
        'amount' => null,
        'authorizeAmount' => null,
        'currency' => null,
        'authorize' => null,
        'paymentMethod' => null,
        'resource' => null,
        'orderNo' => null,
        'description' => null,
        'extra' => null,
        'metadata' => null,
        'cardInfo' => null,
        'voucherNo' => null,
        'clientIp' => null,
        'paid' => null,
        'refunded' => null,
        'disputed' => null,
        'refunds' => null,
        'status' => null,
        'codeContent' => null,
        'credential' => null,
        'paidTime' => 'int64',
        'refundTime' => 'int64',
        'expiryTime' => 'int64',
        'settleTime' => 'int64',
        'createTime' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'appId' => false,
		'object' => false,
		'liveMode' => false,
		'amount' => false,
		'authorizeAmount' => false,
		'currency' => false,
		'authorize' => false,
		'paymentMethod' => false,
		'resource' => false,
		'orderNo' => false,
		'description' => false,
		'extra' => false,
		'metadata' => false,
		'cardInfo' => false,
		'voucherNo' => false,
		'clientIp' => false,
		'paid' => false,
		'refunded' => false,
		'disputed' => false,
		'refunds' => false,
		'status' => false,
		'codeContent' => false,
		'credential' => false,
		'paidTime' => false,
		'refundTime' => false,
		'expiryTime' => false,
		'settleTime' => false,
		'createTime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'appId' => 'appId',
        'object' => 'object',
        'liveMode' => 'liveMode',
        'amount' => 'amount',
        'authorizeAmount' => 'authorizeAmount',
        'currency' => 'currency',
        'authorize' => 'authorize',
        'paymentMethod' => 'paymentMethod',
        'resource' => 'resource',
        'orderNo' => 'orderNo',
        'description' => 'description',
        'extra' => 'extra',
        'metadata' => 'metadata',
        'cardInfo' => 'cardInfo',
        'voucherNo' => 'voucherNo',
        'clientIp' => 'clientIp',
        'paid' => 'paid',
        'refunded' => 'refunded',
        'disputed' => 'disputed',
        'refunds' => 'refunds',
        'status' => 'status',
        'codeContent' => 'codeContent',
        'credential' => 'credential',
        'paidTime' => 'paidTime',
        'refundTime' => 'refundTime',
        'expiryTime' => 'expiryTime',
        'settleTime' => 'settleTime',
        'createTime' => 'createTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'appId' => 'setAppId',
        'object' => 'setObject',
        'liveMode' => 'setLiveMode',
        'amount' => 'setAmount',
        'authorizeAmount' => 'setAuthorizeAmount',
        'currency' => 'setCurrency',
        'authorize' => 'setAuthorize',
        'paymentMethod' => 'setPaymentMethod',
        'resource' => 'setResource',
        'orderNo' => 'setOrderNo',
        'description' => 'setDescription',
        'extra' => 'setExtra',
        'metadata' => 'setMetadata',
        'cardInfo' => 'setCardInfo',
        'voucherNo' => 'setVoucherNo',
        'clientIp' => 'setClientIp',
        'paid' => 'setPaid',
        'refunded' => 'setRefunded',
        'disputed' => 'setDisputed',
        'refunds' => 'setRefunds',
        'status' => 'setStatus',
        'codeContent' => 'setCodeContent',
        'credential' => 'setCredential',
        'paidTime' => 'setPaidTime',
        'refundTime' => 'setRefundTime',
        'expiryTime' => 'setExpiryTime',
        'settleTime' => 'setSettleTime',
        'createTime' => 'setCreateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'appId' => 'getAppId',
        'object' => 'getObject',
        'liveMode' => 'getLiveMode',
        'amount' => 'getAmount',
        'authorizeAmount' => 'getAuthorizeAmount',
        'currency' => 'getCurrency',
        'authorize' => 'getAuthorize',
        'paymentMethod' => 'getPaymentMethod',
        'resource' => 'getResource',
        'orderNo' => 'getOrderNo',
        'description' => 'getDescription',
        'extra' => 'getExtra',
        'metadata' => 'getMetadata',
        'cardInfo' => 'getCardInfo',
        'voucherNo' => 'getVoucherNo',
        'clientIp' => 'getClientIp',
        'paid' => 'getPaid',
        'refunded' => 'getRefunded',
        'disputed' => 'getDisputed',
        'refunds' => 'getRefunds',
        'status' => 'getStatus',
        'codeContent' => 'getCodeContent',
        'credential' => 'getCredential',
        'paidTime' => 'getPaidTime',
        'refundTime' => 'getRefundTime',
        'expiryTime' => 'getExpiryTime',
        'settleTime' => 'getSettleTime',
        'createTime' => 'getCreateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('appId', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], 'charge');
        $this->setIfExists('liveMode', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('authorizeAmount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], 'JPY');
        $this->setIfExists('authorize', $data ?? [], null);
        $this->setIfExists('paymentMethod', $data ?? [], null);
        $this->setIfExists('resource', $data ?? [], null);
        $this->setIfExists('orderNo', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('extra', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('cardInfo', $data ?? [], null);
        $this->setIfExists('voucherNo', $data ?? [], null);
        $this->setIfExists('clientIp', $data ?? [], null);
        $this->setIfExists('paid', $data ?? [], null);
        $this->setIfExists('refunded', $data ?? [], null);
        $this->setIfExists('disputed', $data ?? [], null);
        $this->setIfExists('refunds', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('codeContent', $data ?? [], null);
        $this->setIfExists('credential', $data ?? [], null);
        $this->setIfExists('paidTime', $data ?? [], null);
        $this->setIfExists('refundTime', $data ?? [], null);
        $this->setIfExists('expiryTime', $data ?? [], null);
        $this->setIfExists('settleTime', $data ?? [], null);
        $this->setIfExists('createTime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Charge ID
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets appId
     *
     * @return string|null
     */
    public function getAppId()
    {
        return $this->container['appId'];
    }

    /**
     * Sets appId
     *
     * @param string|null $appId App ID
     *
     * @return self
     */
    public function setAppId($appId)
    {

        if (is_null($appId)) {
            throw new \InvalidArgumentException('non-nullable appId cannot be null');
        }

        $this->container['appId'] = $appId;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object 対象種類の表記
     *
     * @return self
     */
    public function setObject($object)
    {

        if (is_null($object)) {
            throw new \InvalidArgumentException('non-nullable object cannot be null');
        }

        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets liveMode
     *
     * @return bool|null
     */
    public function getLiveMode()
    {
        return $this->container['liveMode'];
    }

    /**
     * Sets liveMode
     *
     * @param bool|null $liveMode 本番モードかどうか - false テストモード - true 本番モード
     *
     * @return self
     */
    public function setLiveMode($liveMode)
    {

        if (is_null($liveMode)) {
            throw new \InvalidArgumentException('non-nullable liveMode cannot be null');
        }

        $this->container['liveMode'] = $liveMode;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount 支払い金額
     *
     * @return self
     */
    public function setAmount($amount)
    {

        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets authorizeAmount
     *
     * @return int|null
     */
    public function getAuthorizeAmount()
    {
        return $this->container['authorizeAmount'];
    }

    /**
     * Sets authorizeAmount
     *
     * @param int|null $authorizeAmount 事前承認金額
     *
     * @return self
     */
    public function setAuthorizeAmount($authorizeAmount)
    {

        if (is_null($authorizeAmount)) {
            throw new \InvalidArgumentException('non-nullable authorizeAmount cannot be null');
        }

        $this->container['authorizeAmount'] = $authorizeAmount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency 通貨コード (ISO_4217)
     *
     * @return self
     */
    public function setCurrency($currency)
    {

        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets authorize
     *
     * @return bool|null
     */
    public function getAuthorize()
    {
        return $this->container['authorize'];
    }

    /**
     * Sets authorize
     *
     * @param bool|null $authorize 事前承認フラグ
     *
     * @return self
     */
    public function setAuthorize($authorize)
    {

        if (is_null($authorize)) {
            throw new \InvalidArgumentException('non-nullable authorize cannot be null');
        }

        $this->container['authorize'] = $authorize;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return \Elepay\Model\PaymentMethodType|null
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param \Elepay\Model\PaymentMethodType|null $paymentMethod paymentMethod
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod)
    {

        if (is_null($paymentMethod)) {
            throw new \InvalidArgumentException('non-nullable paymentMethod cannot be null');
        }

        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return \Elepay\Model\ResourceType|null
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param \Elepay\Model\ResourceType|null $resource resource
     *
     * @return self
     */
    public function setResource($resource)
    {

        if (is_null($resource)) {
            throw new \InvalidArgumentException('non-nullable resource cannot be null');
        }

        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets orderNo
     *
     * @return string|null
     */
    public function getOrderNo()
    {
        return $this->container['orderNo'];
    }

    /**
     * Sets orderNo
     *
     * @param string|null $orderNo お客様システム側のオーダーNo、例えば注文番号、決済IDなど
     *
     * @return self
     */
    public function setOrderNo($orderNo)
    {

        if (is_null($orderNo)) {
            throw new \InvalidArgumentException('non-nullable orderNo cannot be null');
        }

        $this->container['orderNo'] = $orderNo;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description 支払い説明文
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets extra
     *
     * @return array<string,string>|null
     */
    public function getExtra()
    {
        return $this->container['extra'];
    }

    /**
     * Sets extra
     *
     * @param array<string,string>|null $extra 支払いエキストラデータ
     *
     * @return self
     */
    public function setExtra($extra)
    {

        if (is_null($extra)) {
            throw new \InvalidArgumentException('non-nullable extra cannot be null');
        }

        $this->container['extra'] = $extra;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata 支払いメタデータ
     *
     * @return self
     */
    public function setMetadata($metadata)
    {

        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }

        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets cardInfo
     *
     * @return \Elepay\Model\CardInfo|null
     */
    public function getCardInfo()
    {
        return $this->container['cardInfo'];
    }

    /**
     * Sets cardInfo
     *
     * @param \Elepay\Model\CardInfo|null $cardInfo cardInfo
     *
     * @return self
     */
    public function setCardInfo($cardInfo)
    {

        if (is_null($cardInfo)) {
            throw new \InvalidArgumentException('non-nullable cardInfo cannot be null');
        }

        $this->container['cardInfo'] = $cardInfo;

        return $this;
    }

    /**
     * Gets voucherNo
     *
     * @return string|null
     */
    public function getVoucherNo()
    {
        return $this->container['voucherNo'];
    }

    /**
     * Sets voucherNo
     *
     * @param string|null $voucherNo プロバイダー決済伝票番号
     *
     * @return self
     */
    public function setVoucherNo($voucherNo)
    {

        if (is_null($voucherNo)) {
            throw new \InvalidArgumentException('non-nullable voucherNo cannot be null');
        }

        $this->container['voucherNo'] = $voucherNo;

        return $this;
    }

    /**
     * Gets clientIp
     *
     * @return string|null
     */
    public function getClientIp()
    {
        return $this->container['clientIp'];
    }

    /**
     * Sets clientIp
     *
     * @param string|null $clientIp Client IP アドレス
     *
     * @return self
     */
    public function setClientIp($clientIp)
    {

        if (is_null($clientIp)) {
            throw new \InvalidArgumentException('non-nullable clientIp cannot be null');
        }

        $this->container['clientIp'] = $clientIp;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return bool|null
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param bool|null $paid 支払い済みフラグ
     *
     * @return self
     */
    public function setPaid($paid)
    {

        if (is_null($paid)) {
            throw new \InvalidArgumentException('non-nullable paid cannot be null');
        }

        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets refunded
     *
     * @return bool|null
     */
    public function getRefunded()
    {
        return $this->container['refunded'];
    }

    /**
     * Sets refunded
     *
     * @param bool|null $refunded 返金済みフラグ
     *
     * @return self
     */
    public function setRefunded($refunded)
    {

        if (is_null($refunded)) {
            throw new \InvalidArgumentException('non-nullable refunded cannot be null');
        }

        $this->container['refunded'] = $refunded;

        return $this;
    }

    /**
     * Gets disputed
     *
     * @return bool|null
     */
    public function getDisputed()
    {
        return $this->container['disputed'];
    }

    /**
     * Sets disputed
     *
     * @param bool|null $disputed 不審請求フラグ
     *
     * @return self
     */
    public function setDisputed($disputed)
    {

        if (is_null($disputed)) {
            throw new \InvalidArgumentException('non-nullable disputed cannot be null');
        }

        $this->container['disputed'] = $disputed;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return \Elepay\Model\RefundsDto|null
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param \Elepay\Model\RefundsDto|null $refunds refunds
     *
     * @return self
     */
    public function setRefunds($refunds)
    {

        if (is_null($refunds)) {
            throw new \InvalidArgumentException('non-nullable refunds cannot be null');
        }

        $this->container['refunds'] = $refunds;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Elepay\Model\ChargeStatusType|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Elepay\Model\ChargeStatusType|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets codeContent
     *
     * @return string|null
     */
    public function getCodeContent()
    {
        return $this->container['codeContent'];
    }

    /**
     * Sets codeContent
     *
     * @param string|null $codeContent 店舗側提示型QRコード(リソースはmpm場合のみ)
     *
     * @return self
     */
    public function setCodeContent($codeContent)
    {

        if (is_null($codeContent)) {
            throw new \InvalidArgumentException('non-nullable codeContent cannot be null');
        }

        $this->container['codeContent'] = $codeContent;

        return $this;
    }

    /**
     * Gets credential
     *
     * @return string|null
     */
    public function getCredential()
    {
        return $this->container['credential'];
    }

    /**
     * Sets credential
     *
     * @param string|null $credential Client SDKの認証情報
     *
     * @return self
     */
    public function setCredential($credential)
    {

        if (is_null($credential)) {
            throw new \InvalidArgumentException('non-nullable credential cannot be null');
        }

        $this->container['credential'] = $credential;

        return $this;
    }

    /**
     * Gets paidTime
     *
     * @return int|null
     */
    public function getPaidTime()
    {
        return $this->container['paidTime'];
    }

    /**
     * Sets paidTime
     *
     * @param int|null $paidTime 支払い時間のUTCタイムスタンプ
     *
     * @return self
     */
    public function setPaidTime($paidTime)
    {

        if (is_null($paidTime)) {
            throw new \InvalidArgumentException('non-nullable paidTime cannot be null');
        }

        $this->container['paidTime'] = $paidTime;

        return $this;
    }

    /**
     * Gets refundTime
     *
     * @return int|null
     */
    public function getRefundTime()
    {
        return $this->container['refundTime'];
    }

    /**
     * Sets refundTime
     *
     * @param int|null $refundTime 返金時間のUTCタイムスタンプ
     *
     * @return self
     */
    public function setRefundTime($refundTime)
    {

        if (is_null($refundTime)) {
            throw new \InvalidArgumentException('non-nullable refundTime cannot be null');
        }

        $this->container['refundTime'] = $refundTime;

        return $this;
    }

    /**
     * Gets expiryTime
     *
     * @return int|null
     */
    public function getExpiryTime()
    {
        return $this->container['expiryTime'];
    }

    /**
     * Sets expiryTime
     *
     * @param int|null $expiryTime 支払い請求有効時間のUTCタイムスタンプ
     *
     * @return self
     */
    public function setExpiryTime($expiryTime)
    {

        if (is_null($expiryTime)) {
            throw new \InvalidArgumentException('non-nullable expiryTime cannot be null');
        }

        $this->container['expiryTime'] = $expiryTime;

        return $this;
    }

    /**
     * Gets settleTime
     *
     * @return int|null
     */
    public function getSettleTime()
    {
        return $this->container['settleTime'];
    }

    /**
     * Sets settleTime
     *
     * @param int|null $settleTime 支払い締め時間のUTCタイムスタンプ
     *
     * @return self
     */
    public function setSettleTime($settleTime)
    {

        if (is_null($settleTime)) {
            throw new \InvalidArgumentException('non-nullable settleTime cannot be null');
        }

        $this->container['settleTime'] = $settleTime;

        return $this;
    }

    /**
     * Gets createTime
     *
     * @return int|null
     */
    public function getCreateTime()
    {
        return $this->container['createTime'];
    }

    /**
     * Sets createTime
     *
     * @param int|null $createTime 支払い新規時間のUTCタイムスタンプ
     *
     * @return self
     */
    public function setCreateTime($createTime)
    {

        if (is_null($createTime)) {
            throw new \InvalidArgumentException('non-nullable createTime cannot be null');
        }

        $this->container['createTime'] = $createTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


