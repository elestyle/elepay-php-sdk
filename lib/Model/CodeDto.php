<?php
/**
 * CodeDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Elepay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * elepay API リファレンス
 *
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.1.13
 * Contact: support@elestyle.jp
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Elepay\Model;

use \ArrayAccess;
use \Elepay\ObjectSerializer;

/**
 * CodeDto Class Doc Comment
 *
 * @category Class
 * @description EasyQRコードオブジェクト
 * @package  Elepay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CodeDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CodeDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'object' => 'string',
        'liveMode' => 'bool',
        'codeUrl' => 'string',
        'amount' => 'int',
        'currency' => 'string',
        'orderNo' => 'string',
        'description' => 'string',
        'metadata' => 'map[string,string]',
        'status' => '\Elepay\Model\CodeStatusType',
        'charge' => '\Elepay\Model\ChargeDto',
        'frontUrl' => 'string',
        'items' => '\Elepay\Model\CodeItem[]',
        'expired' => 'bool',
        'expiryTime' => 'int',
        'expiryPeriod' => 'int',
        'createTime' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'object' => null,
        'liveMode' => null,
        'codeUrl' => null,
        'amount' => null,
        'currency' => null,
        'orderNo' => null,
        'description' => null,
        'metadata' => null,
        'status' => null,
        'charge' => null,
        'frontUrl' => null,
        'items' => null,
        'expired' => null,
        'expiryTime' => 'int64',
        'expiryPeriod' => 'int64',
        'createTime' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'object' => 'object',
        'liveMode' => 'liveMode',
        'codeUrl' => 'codeUrl',
        'amount' => 'amount',
        'currency' => 'currency',
        'orderNo' => 'orderNo',
        'description' => 'description',
        'metadata' => 'metadata',
        'status' => 'status',
        'charge' => 'charge',
        'frontUrl' => 'frontUrl',
        'items' => 'items',
        'expired' => 'expired',
        'expiryTime' => 'expiryTime',
        'expiryPeriod' => 'expiryPeriod',
        'createTime' => 'createTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'object' => 'setObject',
        'liveMode' => 'setLiveMode',
        'codeUrl' => 'setCodeUrl',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'orderNo' => 'setOrderNo',
        'description' => 'setDescription',
        'metadata' => 'setMetadata',
        'status' => 'setStatus',
        'charge' => 'setCharge',
        'frontUrl' => 'setFrontUrl',
        'items' => 'setItems',
        'expired' => 'setExpired',
        'expiryTime' => 'setExpiryTime',
        'expiryPeriod' => 'setExpiryPeriod',
        'createTime' => 'setCreateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'object' => 'getObject',
        'liveMode' => 'getLiveMode',
        'codeUrl' => 'getCodeUrl',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'orderNo' => 'getOrderNo',
        'description' => 'getDescription',
        'metadata' => 'getMetadata',
        'status' => 'getStatus',
        'charge' => 'getCharge',
        'frontUrl' => 'getFrontUrl',
        'items' => 'getItems',
        'expired' => 'getExpired',
        'expiryTime' => 'getExpiryTime',
        'expiryPeriod' => 'getExpiryPeriod',
        'createTime' => 'getCreateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['object'] = isset($data['object']) ? $data['object'] : 'code';
        $this->container['liveMode'] = isset($data['liveMode']) ? $data['liveMode'] : null;
        $this->container['codeUrl'] = isset($data['codeUrl']) ? $data['codeUrl'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : 'JPY';
        $this->container['orderNo'] = isset($data['orderNo']) ? $data['orderNo'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['charge'] = isset($data['charge']) ? $data['charge'] : null;
        $this->container['frontUrl'] = isset($data['frontUrl']) ? $data['frontUrl'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['expired'] = isset($data['expired']) ? $data['expired'] : null;
        $this->container['expiryTime'] = isset($data['expiryTime']) ? $data['expiryTime'] : null;
        $this->container['expiryPeriod'] = isset($data['expiryPeriod']) ? $data['expiryPeriod'] : null;
        $this->container['createTime'] = isset($data['createTime']) ? $data['createTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id EasyQRコードID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object 対象種類の表記
     *
     * @return $this
     */
    public function setObject($object)
    {
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets liveMode
     *
     * @return bool|null
     */
    public function getLiveMode()
    {
        return $this->container['liveMode'];
    }

    /**
     * Sets liveMode
     *
     * @param bool|null $liveMode 本番モードかどうか - false テストモード - true 本番モード
     *
     * @return $this
     */
    public function setLiveMode($liveMode)
    {
        $this->container['liveMode'] = $liveMode;

        return $this;
    }

    /**
     * Gets codeUrl
     *
     * @return string|null
     */
    public function getCodeUrl()
    {
        return $this->container['codeUrl'];
    }

    /**
     * Sets codeUrl
     *
     * @param string|null $codeUrl EasyQRコードURL
     *
     * @return $this
     */
    public function setCodeUrl($codeUrl)
    {
        $this->container['codeUrl'] = $codeUrl;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount 支払い金額
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency 通貨コード (ISO_4217)
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets orderNo
     *
     * @return string|null
     */
    public function getOrderNo()
    {
        return $this->container['orderNo'];
    }

    /**
     * Sets orderNo
     *
     * @param string|null $orderNo お客様システム側のオーダーNo、例えば注文番号、決済IDなど
     *
     * @return $this
     */
    public function setOrderNo($orderNo)
    {
        $this->container['orderNo'] = $orderNo;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description 支払いオブジェクトの「決済に関する説明」
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string]|null $metadata 支払いオブジェクトの「メタデータ」
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Elepay\Model\CodeStatusType|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Elepay\Model\CodeStatusType|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets charge
     *
     * @return \Elepay\Model\ChargeDto|null
     */
    public function getCharge()
    {
        return $this->container['charge'];
    }

    /**
     * Sets charge
     *
     * @param \Elepay\Model\ChargeDto|null $charge charge
     *
     * @return $this
     */
    public function setCharge($charge)
    {
        $this->container['charge'] = $charge;

        return $this;
    }

    /**
     * Gets frontUrl
     *
     * @return string|null
     */
    public function getFrontUrl()
    {
        return $this->container['frontUrl'];
    }

    /**
     * Sets frontUrl
     *
     * @param string|null $frontUrl frontUrl
     *
     * @return $this
     */
    public function setFrontUrl($frontUrl)
    {
        $this->container['frontUrl'] = $frontUrl;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Elepay\Model\CodeItem[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Elepay\Model\CodeItem[]|null $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets expired
     *
     * @return bool|null
     */
    public function getExpired()
    {
        return $this->container['expired'];
    }

    /**
     * Sets expired
     *
     * @param bool|null $expired EasyQRコード有効有無
     *
     * @return $this
     */
    public function setExpired($expired)
    {
        $this->container['expired'] = $expired;

        return $this;
    }

    /**
     * Gets expiryTime
     *
     * @return int|null
     */
    public function getExpiryTime()
    {
        return $this->container['expiryTime'];
    }

    /**
     * Sets expiryTime
     *
     * @param int|null $expiryTime EasyQRコード有効期限のUTCタイムスタンプ
     *
     * @return $this
     */
    public function setExpiryTime($expiryTime)
    {
        $this->container['expiryTime'] = $expiryTime;

        return $this;
    }

    /**
     * Gets expiryPeriod
     *
     * @return int|null
     */
    public function getExpiryPeriod()
    {
        return $this->container['expiryPeriod'];
    }

    /**
     * Sets expiryPeriod
     *
     * @param int|null $expiryPeriod EasyQRコード有効期限までの残りミリ秒数
     *
     * @return $this
     */
    public function setExpiryPeriod($expiryPeriod)
    {
        $this->container['expiryPeriod'] = $expiryPeriod;

        return $this;
    }

    /**
     * Gets createTime
     *
     * @return int|null
     */
    public function getCreateTime()
    {
        return $this->container['createTime'];
    }

    /**
     * Sets createTime
     *
     * @param int|null $createTime コード新規時間のUTCタイムスタンプ
     *
     * @return $this
     */
    public function setCreateTime($createTime)
    {
        $this->container['createTime'] = $createTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


