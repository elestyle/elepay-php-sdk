<?php
/**
 * SubscriptionDto
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Elepay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * elepay API リファレンス
 *
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@elestyle.jp
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Elepay\Model;

use \ArrayAccess;
use \Elepay\ObjectSerializer;

/**
 * SubscriptionDto Class Doc Comment
 *
 * @category Class
 * @description 定期課金オブジェクト
 * @package  Elepay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SubscriptionDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubscriptionDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'appId' => 'string',
        'object' => 'string',
        'liveMode' => 'bool',
        'customerId' => 'string',
        'customer' => '\Elepay\Model\CustomerDto',
        'nextChargeTime' => 'int',
        'isCharging' => 'bool',
        'chargedPeriods' => 'int',
        'metadata' => 'array<string,string>',
        'status' => '\Elepay\Model\SubscriptionStatusType',
        'createTime' => 'int',
        'updateTime' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'appId' => null,
        'object' => null,
        'liveMode' => null,
        'customerId' => null,
        'customer' => null,
        'nextChargeTime' => 'int64',
        'isCharging' => null,
        'chargedPeriods' => null,
        'metadata' => null,
        'status' => null,
        'createTime' => 'int64',
        'updateTime' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'appId' => 'appId',
        'object' => 'object',
        'liveMode' => 'liveMode',
        'customerId' => 'customerId',
        'customer' => 'customer',
        'nextChargeTime' => 'nextChargeTime',
        'isCharging' => 'isCharging',
        'chargedPeriods' => 'chargedPeriods',
        'metadata' => 'metadata',
        'status' => 'status',
        'createTime' => 'createTime',
        'updateTime' => 'updateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'appId' => 'setAppId',
        'object' => 'setObject',
        'liveMode' => 'setLiveMode',
        'customerId' => 'setCustomerId',
        'customer' => 'setCustomer',
        'nextChargeTime' => 'setNextChargeTime',
        'isCharging' => 'setIsCharging',
        'chargedPeriods' => 'setChargedPeriods',
        'metadata' => 'setMetadata',
        'status' => 'setStatus',
        'createTime' => 'setCreateTime',
        'updateTime' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'appId' => 'getAppId',
        'object' => 'getObject',
        'liveMode' => 'getLiveMode',
        'customerId' => 'getCustomerId',
        'customer' => 'getCustomer',
        'nextChargeTime' => 'getNextChargeTime',
        'isCharging' => 'getIsCharging',
        'chargedPeriods' => 'getChargedPeriods',
        'metadata' => 'getMetadata',
        'status' => 'getStatus',
        'createTime' => 'getCreateTime',
        'updateTime' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['appId'] = $data['appId'] ?? null;
        $this->container['object'] = $data['object'] ?? 'subscription';
        $this->container['liveMode'] = $data['liveMode'] ?? null;
        $this->container['customerId'] = $data['customerId'] ?? null;
        $this->container['customer'] = $data['customer'] ?? null;
        $this->container['nextChargeTime'] = $data['nextChargeTime'] ?? null;
        $this->container['isCharging'] = $data['isCharging'] ?? null;
        $this->container['chargedPeriods'] = $data['chargedPeriods'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['createTime'] = $data['createTime'] ?? null;
        $this->container['updateTime'] = $data['updateTime'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Subscription ID
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets appId
     *
     * @return string|null
     */
    public function getAppId()
    {
        return $this->container['appId'];
    }

    /**
     * Sets appId
     *
     * @param string|null $appId App ID
     *
     * @return self
     */
    public function setAppId($appId)
    {
        $this->container['appId'] = $appId;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object 対象種類の表記
     *
     * @return self
     */
    public function setObject($object)
    {
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets liveMode
     *
     * @return bool|null
     */
    public function getLiveMode()
    {
        return $this->container['liveMode'];
    }

    /**
     * Sets liveMode
     *
     * @param bool|null $liveMode 本番モードかどうか - false テストモード - true 本番モード
     *
     * @return self
     */
    public function setLiveMode($liveMode)
    {
        $this->container['liveMode'] = $liveMode;

        return $this;
    }

    /**
     * Gets customerId
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     *
     * @param string|null $customerId Customer ID
     *
     * @return self
     */
    public function setCustomerId($customerId)
    {
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Elepay\Model\CustomerDto|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Elepay\Model\CustomerDto|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets nextChargeTime
     *
     * @return int|null
     */
    public function getNextChargeTime()
    {
        return $this->container['nextChargeTime'];
    }

    /**
     * Sets nextChargeTime
     *
     * @param int|null $nextChargeTime 次定期課金周期開始UTCタイムスタンプ
     *
     * @return self
     */
    public function setNextChargeTime($nextChargeTime)
    {
        $this->container['nextChargeTime'] = $nextChargeTime;

        return $this;
    }

    /**
     * Gets isCharging
     *
     * @return bool|null
     */
    public function getIsCharging()
    {
        return $this->container['isCharging'];
    }

    /**
     * Sets isCharging
     *
     * @param bool|null $isCharging 処理中かどうか
     *
     * @return self
     */
    public function setIsCharging($isCharging)
    {
        $this->container['isCharging'] = $isCharging;

        return $this;
    }

    /**
     * Gets chargedPeriods
     *
     * @return int|null
     */
    public function getChargedPeriods()
    {
        return $this->container['chargedPeriods'];
    }

    /**
     * Sets chargedPeriods
     *
     * @param int|null $chargedPeriods 成功した定期課金回数
     *
     * @return self
     */
    public function setChargedPeriods($chargedPeriods)
    {
        $this->container['chargedPeriods'] = $chargedPeriods;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata メタデータ
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Elepay\Model\SubscriptionStatusType|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Elepay\Model\SubscriptionStatusType|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets createTime
     *
     * @return int|null
     */
    public function getCreateTime()
    {
        return $this->container['createTime'];
    }

    /**
     * Sets createTime
     *
     * @param int|null $createTime 作成UTCタイムスタンプ
     *
     * @return self
     */
    public function setCreateTime($createTime)
    {
        $this->container['createTime'] = $createTime;

        return $this;
    }

    /**
     * Gets updateTime
     *
     * @return int|null
     */
    public function getUpdateTime()
    {
        return $this->container['updateTime'];
    }

    /**
     * Sets updateTime
     *
     * @param int|null $updateTime 更新UTCタイムスタンプ
     *
     * @return self
     */
    public function setUpdateTime($updateTime)
    {
        $this->container['updateTime'] = $updateTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


