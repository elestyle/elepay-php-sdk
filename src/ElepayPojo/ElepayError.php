<?php
/**
 * ElepayError
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * elepay API リファレンス
 *
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\ElepayPojo;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ElepayError Class Doc Comment
 *
 * @category Class
 * @description エラー情報
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ElepayError implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ElepayError';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'code' => 'string',
        'message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'code' => null,
        'message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'code' => 'code',
        'message' => 'message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'code' => 'setCode',
        'message' => 'setMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'code' => 'getCode',
        'message' => 'getMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_NOT_FOUND_ERROR = 'not_found_error';
    const TYPE_INVALID_REQUEST_ERROR = 'invalid_request_error';
    const TYPE_CHANNEL_VALIDATION_ERROR = 'channel_validation_error';
    const TYPE_CHANNEL_ERROR = 'channel_error';
    const TYPE_PROVIDER_ERROR = 'provider_error';
    const TYPE_CONNECTION_ERROR = 'connection_error';
    const TYPE_PROCESS_ERROR = 'process_error';
    const TYPE_AUTHENTICATION_ERROR = 'authentication_error';
    const TYPE_FORBIDDEN_ERROR = 'forbidden_error';
    const TYPE_RATE_LIMIT_ERROR = 'rate_limit_error';
    const TYPE_API_ERROR = 'api_error';
    const TYPE_API_CONNECTION_ERROR = 'api_connection_error';
    const CODE_NOT_FOUND = 'not_found';
    const CODE_NOT_FOUND_CHARGE = 'not_found_charge';
    const CODE_AUTH_INVALID_CREDENTIAL = 'auth_invalid_credential';
    const CODE_AUTH_INVALID_PROVIDER = 'auth_invalid_provider';
    const CODE_INVALID_REQUEST = 'invalid_request';
    const CODE_INVALID_ORDER_NO = 'invalid_order_no';
    const CODE_INVALID_PAYMENT_METHOD = 'invalid_payment_method';
    const CODE_INVALID_AMOUNT = 'invalid_amount';
    const CODE_INVALID_TOKEN = 'invalid_token';
    const CODE_INVALID_FRONT_URL = 'invalid_front_url';
    const CODE_INVALID_CANCEL_URL = 'invalid_cancel_url';
    const CODE_INVALID_CONTRACT_NUMBER = 'invalid_contract_number';
    const CODE_INVALID_USERNAME = 'invalid_username';
    const CODE_INVALID_EMAIL = 'invalid_email';
    const CODE_INVALID_PASSWORD = 'invalid_password';
    const CODE_INVALID_ORDER_NO_LENGTH = 'invalid_order_no_length';
    const CODE_INVALID_STATUS_CHANGE = 'invalid_status_change';
    const CODE_INVALID_STATUS_CHANGE_BY_APP = 'invalid_status_change_by_app';
    const CODE_INVALID_STATUS_CHANGE_BY_PROVIDER = 'invalid_status_change_by_provider';
    const CODE_INVALID_PROVIDER_UNIQUE_ID = 'invalid_provider_unique_id';
    const CODE_INVALID_PROVIDER_CAPTURE_ID = 'invalid_provider_capture_id';
    const CODE_INVALID_CHANNEL_GROUP = 'invalid_channel_group';
    const CODE_INVALID_BUYER_NAME = 'invalid_buyer_name';
    const CODE_INVALID_BUYER_PHONE = 'invalid_buyer_phone';
    const CODE_INVALID_BUYER_EMAIL = 'invalid_buyer_email';
    const CODE_INVALID_BUYER_ZIP = 'invalid_buyer_zip';
    const CODE_INVALID_BUYER_ADDRESS1 = 'invalid_buyer_address1';
    const CODE_INVALID_BUYER_ADDRESS2 = 'invalid_buyer_address2';
    const CODE_INVALID_CODE_URL = 'invalid_code_url';
    const CODE_INVALID_SHOP_ID = 'invalid_shop_id';
    const CODE_INVALID_SHOP_NAME = 'invalid_shop_name';
    const CODE_INVALID_SHOP_NO = 'invalid_shop_no';
    const CODE_INVALID_PRODUCT_ID = 'invalid_product_id';
    const CODE_INVALID_PRODUCT_NAME = 'invalid_product_name';
    const CODE_INVALID_PRODUCT_PRICE = 'invalid_product_price';
    const CODE_INVALID_PRODUCT_COUNT = 'invalid_product_count';
    const CODE_INVALID_SETTING_TYPE = 'invalid_setting_type';
    const CODE_INVALID_SETTING_NAME = 'invalid_setting_name';
    const CODE_INVALID_CATEGORY_ID = 'invalid_category_id';
    const CODE_INVALID_CATEGORY_NAME = 'invalid_category_name';
    const CODE_INVALID_ORDER_AMOUNT = 'invalid_order_amount';
    const CODE_INVALID_ORDER_AMOUNT_CHANGE = 'invalid_order_amount_change';
    const CODE_INVALID_PRODUCT_INACTIVE = 'invalid_product_inactive';
    const CODE_INVALID_NAME = 'invalid_name';
    const CODE_INVALID_ROLE = 'invalid_role';
    const CODE_INVALID_CAMPAIGN_NAME = 'invalid_campaign_name';
    const CODE_INVALID_CAMPAIGN_TIME = 'invalid_campaign_time';
    const CODE_INVALID_CAMPAIGN_START_TIME = 'invalid_campaign_start_time';
    const CODE_INVALID_CAMPAIGN_EXPIRED_TIME = 'invalid_campaign_expired_time';
    const CODE_INVALID_CAMPAIGN_DISCOUNT_TYPE = 'invalid_campaign_discount_type';
    const CODE_INVALID_CAMPAIGN_DISCOUNT_VALUE = 'invalid_campaign_discount_value';
    const CODE_INVALID_CAMPAIGN_CONDITION_TYPE = 'invalid_campaign_condition_type';
    const CODE_INVALID_VALUE = 'invalid_value';
    const CODE_INVALID_THEME_NAME = 'invalid_theme_name';
    const CODE_INVALID_LABEL_NAME = 'invalid_label_name';
    const CODE_INVALID_SKU = 'invalid_sku';
    const CODE_INVALID_CHARGE = 'invalid_charge';
    const CODE_INVALID_FROM = 'invalid_from';
    const CODE_INVALID_TO = 'invalid_to';
    const CODE_INVALID_EXPORT_DATA_DATE_RANGE = 'invalid_export_data_date_range';
    const CODE_INVALID_SECRET_KEY = 'invalid_secret_key';
    const CODE_INVALID_AUTH_CODE = 'invalid_auth_code';
    const CODE_INVALID_TERMINAL_ID = 'invalid_terminal_id';
    const CODE_INVALID_LANG = 'invalid_lang';
    const CODE_INVALID_TITLE = 'invalid_title';
    const CODE_INVALID_CONTENT = 'invalid_content';
    const CODE_INVALID_TYPE = 'invalid_type';
    const CODE_INVALID_LEGAL_REGISTRATION_NO = 'invalid_legal_registration_no';
    const CODE_INVALID_COUNTRY = 'invalid_country';
    const CODE_INVALID_PUBLISH_DATE = 'invalid_publish_date';
    const CODE_INVALID_JSON_FORMAT = 'invalid_json_format';
    const CODE_INVALID_TITLE_LENGTH = 'invalid_title_length';
    const CODE_INVALID_NAME_LENGTH = 'invalid_name_length';
    const CODE_INVALID_REF_TYPE_LENGTH = 'invalid_ref_type_length';
    const CODE_INVALID_REF_ID_LENGTH = 'invalid_ref_id_length';
    const CODE_INVALID_TYPE_LENGTH = 'invalid_type_length';
    const CODE_INVALID_DESC_LENGTH = 'invalid_desc_length';
    const CODE_INVALID_KEY_LENGTH = 'invalid_key_length';
    const CODE_INVALID_CODE_LENGTH = 'invalid_code_length';
    const CODE_INVALID_LEGAL_REGISTRATION_NO_LENGTH = 'invalid_legal_registration_no_length';
    const CODE_INVALID_ESTABLISHMENT_DATE_LENGTH = 'invalid_establishment_date_length';
    const CODE_INVALID_COUNTRY_LENGTH = 'invalid_country_length';
    const CODE_INVALID_BANK_CODE_LENGTH = 'invalid_bank_code_length';
    const CODE_INVALID_BRANCH_CODE_LENGTH = 'invalid_branch_code_length';
    const CODE_INVALID_BANK_ACCOUNT_NUMBER_LENGTH = 'invalid_bank_account_number_length';
    const CODE_INVALID_BIRTHDAY_LENGTH = 'invalid_birthday_length';
    const CODE_INVALID_EMAIL_LENGTH = 'invalid_email_length';
    const CODE_INVALID_ZIP_LENGTH = 'invalid_zip_length';
    const CODE_INVALID_TEL_LENGTH = 'invalid_tel_length';
    const CODE_INVALID_FAX_LENGTH = 'invalid_fax_length';
    const CODE_INVALID_SORT_ORDER_LENGTH = 'invalid_sort_order_length';
    const CODE_INVALID_PARKING_RACK_NO = 'invalid_parking_rack_no';
    const CODE_INVALID_PARKING_RACK_STATUS = 'invalid_parking_rack_status';
    const CODE_INVALID_PARKING_RACK_STATUS_NOT_USED = 'invalid_parking_rack_status_not_used';
    const CODE_INVALID_PARKING_RACK_STATUS_OPENED = 'invalid_parking_rack_status_opened';
    const CODE_INVALID_PARKING_RACK_STATUS_LOCKED = 'invalid_parking_rack_status_locked';
    const CODE_INVALID_PARKING_RACK_STATUS_CONNECT_FAIL = 'invalid_parking_rack_status_connect_fail';
    const CODE_INVALID_PARKING_NO_OR_RACK_NO = 'invalid_parking_no_or_rack_no';
    const CODE_INVALID_PARKING_PIN_CODE = 'invalid_parking_pin_code';
    const CODE_INCORRECT_CURRENCY = 'incorrect_currency';
    const CODE_INCORRECT_CARD_NUMBER = 'incorrect_card_number';
    const CODE_INCORRECT_AMOUNT = 'incorrect_amount';
    const CODE_INCORRECT_MERCHANT_ID = 'incorrect_merchant_id';
    const CODE_INCORRECT_PRODUCT_ID = 'incorrect_product_id';
    const CODE_INCORRECT_EXPORT_DATA_DATE_RANGE = 'incorrect_export_data_date_range';
    const CODE_INCORRECT_STATUS = 'incorrect_status';
    const CODE_PROVIDER_RESPONSE_RESULT_FAILED = 'provider_response_result_failed';
    const CODE_NO_SUCH_TOKEN = 'no_such_token';
    const CODE_DUPLICATE_ORDER_NO = 'duplicate_order_no';
    const CODE_DUPLICATE_SHOP_NO = 'duplicate_shop_no';
    const CODE_DUPLICATE_CONTRACT_NUMBER = 'duplicate_contract_number';
    const CODE_DUPLICATE_EMAIL = 'duplicate_email';
    const CODE_DUPLICATE_LEGAL_REGISTRATION_NO = 'duplicate_legal_registration_no';
    const CODE_DUPLICATE_KEY = 'duplicate_key';
    const CODE_DUPLICATE_CATEGORY_NAME = 'duplicate_category_name';
    const CODE_EXPIRED_CARD = 'expired_card';
    const CODE_CARD_DECLINED = 'card_declined';
    const CODE_PROCESSING_CARD_ERROR = 'processing_card_error';
    const CODE_REQUIRED_KEY = 'required_key';
    const CODE_CHARGE_ALREADY_CAPTURED = 'charge_already_captured';
    const CODE_CHARGE_ALREADY_REFUNDED = 'charge_already_refunded';
    const CODE_REFUSED_REFUND = 'refused_refund';
    const CODE_REFUSED_REFUND_CONSTRAINT_DAY = 'refused_refund_constraint_day';
    const CODE_REFUSED_REFUND_NON_CAPTURED = 'refused_refund_non_captured';
    const CODE_INACTIVE_APPLICATION = 'inactive_application';
    const CODE_INACTIVE_PAYMENT_METHOD = 'inactive_payment_method';
    const CODE_INACTIVE_PRODUCT = 'inactive_product';
    const CODE_EXIST_PAYMENT_METHOD = 'exist_payment_method';
    const CODE_CAMPAIGN_ALREADY_STARTED = 'campaign_already_started';
    const CODE_OVER_SHOP_LIMIT_COUNT = 'over_shop_limit_count';
    const CODE_OVER_PRODUCT_LIMIT_COUNT = 'over_product_limit_count';
    const CODE_PROCESS_ERROR = 'process_error';
    const CODE_API_CONNECTION_ERROR = 'api_connection_error';
    const CODE_PROVIDER_CONFIG_ERROR = 'provider_config_error';
    const CODE_API_ERROR = 'api_error';
    const CODE_FORBIDDEN = 'forbidden';
    const CODE_FORBIDDEN_CLOSE_SELF = 'forbidden_close_self';
    const CODE_RECAPTCHA_FAIL = 'recaptcha_fail';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NOT_FOUND_ERROR,
            self::TYPE_INVALID_REQUEST_ERROR,
            self::TYPE_CHANNEL_VALIDATION_ERROR,
            self::TYPE_CHANNEL_ERROR,
            self::TYPE_PROVIDER_ERROR,
            self::TYPE_CONNECTION_ERROR,
            self::TYPE_PROCESS_ERROR,
            self::TYPE_AUTHENTICATION_ERROR,
            self::TYPE_FORBIDDEN_ERROR,
            self::TYPE_RATE_LIMIT_ERROR,
            self::TYPE_API_ERROR,
            self::TYPE_API_CONNECTION_ERROR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_NOT_FOUND,
            self::CODE_NOT_FOUND_CHARGE,
            self::CODE_AUTH_INVALID_CREDENTIAL,
            self::CODE_AUTH_INVALID_PROVIDER,
            self::CODE_INVALID_REQUEST,
            self::CODE_INVALID_ORDER_NO,
            self::CODE_INVALID_PAYMENT_METHOD,
            self::CODE_INVALID_AMOUNT,
            self::CODE_INVALID_TOKEN,
            self::CODE_INVALID_FRONT_URL,
            self::CODE_INVALID_CANCEL_URL,
            self::CODE_INVALID_CONTRACT_NUMBER,
            self::CODE_INVALID_USERNAME,
            self::CODE_INVALID_EMAIL,
            self::CODE_INVALID_PASSWORD,
            self::CODE_INVALID_ORDER_NO_LENGTH,
            self::CODE_INVALID_STATUS_CHANGE,
            self::CODE_INVALID_STATUS_CHANGE_BY_APP,
            self::CODE_INVALID_STATUS_CHANGE_BY_PROVIDER,
            self::CODE_INVALID_PROVIDER_UNIQUE_ID,
            self::CODE_INVALID_PROVIDER_CAPTURE_ID,
            self::CODE_INVALID_CHANNEL_GROUP,
            self::CODE_INVALID_BUYER_NAME,
            self::CODE_INVALID_BUYER_PHONE,
            self::CODE_INVALID_BUYER_EMAIL,
            self::CODE_INVALID_BUYER_ZIP,
            self::CODE_INVALID_BUYER_ADDRESS1,
            self::CODE_INVALID_BUYER_ADDRESS2,
            self::CODE_INVALID_CODE_URL,
            self::CODE_INVALID_SHOP_ID,
            self::CODE_INVALID_SHOP_NAME,
            self::CODE_INVALID_SHOP_NO,
            self::CODE_INVALID_PRODUCT_ID,
            self::CODE_INVALID_PRODUCT_NAME,
            self::CODE_INVALID_PRODUCT_PRICE,
            self::CODE_INVALID_PRODUCT_COUNT,
            self::CODE_INVALID_SETTING_TYPE,
            self::CODE_INVALID_SETTING_NAME,
            self::CODE_INVALID_CATEGORY_ID,
            self::CODE_INVALID_CATEGORY_NAME,
            self::CODE_INVALID_ORDER_AMOUNT,
            self::CODE_INVALID_ORDER_AMOUNT_CHANGE,
            self::CODE_INVALID_PRODUCT_INACTIVE,
            self::CODE_INVALID_NAME,
            self::CODE_INVALID_ROLE,
            self::CODE_INVALID_CAMPAIGN_NAME,
            self::CODE_INVALID_CAMPAIGN_TIME,
            self::CODE_INVALID_CAMPAIGN_START_TIME,
            self::CODE_INVALID_CAMPAIGN_EXPIRED_TIME,
            self::CODE_INVALID_CAMPAIGN_DISCOUNT_TYPE,
            self::CODE_INVALID_CAMPAIGN_DISCOUNT_VALUE,
            self::CODE_INVALID_CAMPAIGN_CONDITION_TYPE,
            self::CODE_INVALID_VALUE,
            self::CODE_INVALID_THEME_NAME,
            self::CODE_INVALID_LABEL_NAME,
            self::CODE_INVALID_SKU,
            self::CODE_INVALID_CHARGE,
            self::CODE_INVALID_FROM,
            self::CODE_INVALID_TO,
            self::CODE_INVALID_EXPORT_DATA_DATE_RANGE,
            self::CODE_INVALID_SECRET_KEY,
            self::CODE_INVALID_AUTH_CODE,
            self::CODE_INVALID_TERMINAL_ID,
            self::CODE_INVALID_LANG,
            self::CODE_INVALID_TITLE,
            self::CODE_INVALID_CONTENT,
            self::CODE_INVALID_TYPE,
            self::CODE_INVALID_LEGAL_REGISTRATION_NO,
            self::CODE_INVALID_COUNTRY,
            self::CODE_INVALID_PUBLISH_DATE,
            self::CODE_INVALID_JSON_FORMAT,
            self::CODE_INVALID_TITLE_LENGTH,
            self::CODE_INVALID_NAME_LENGTH,
            self::CODE_INVALID_REF_TYPE_LENGTH,
            self::CODE_INVALID_REF_ID_LENGTH,
            self::CODE_INVALID_TYPE_LENGTH,
            self::CODE_INVALID_DESC_LENGTH,
            self::CODE_INVALID_KEY_LENGTH,
            self::CODE_INVALID_CODE_LENGTH,
            self::CODE_INVALID_LEGAL_REGISTRATION_NO_LENGTH,
            self::CODE_INVALID_ESTABLISHMENT_DATE_LENGTH,
            self::CODE_INVALID_COUNTRY_LENGTH,
            self::CODE_INVALID_BANK_CODE_LENGTH,
            self::CODE_INVALID_BRANCH_CODE_LENGTH,
            self::CODE_INVALID_BANK_ACCOUNT_NUMBER_LENGTH,
            self::CODE_INVALID_BIRTHDAY_LENGTH,
            self::CODE_INVALID_EMAIL_LENGTH,
            self::CODE_INVALID_ZIP_LENGTH,
            self::CODE_INVALID_TEL_LENGTH,
            self::CODE_INVALID_FAX_LENGTH,
            self::CODE_INVALID_SORT_ORDER_LENGTH,
            self::CODE_INVALID_PARKING_RACK_NO,
            self::CODE_INVALID_PARKING_RACK_STATUS,
            self::CODE_INVALID_PARKING_RACK_STATUS_NOT_USED,
            self::CODE_INVALID_PARKING_RACK_STATUS_OPENED,
            self::CODE_INVALID_PARKING_RACK_STATUS_LOCKED,
            self::CODE_INVALID_PARKING_RACK_STATUS_CONNECT_FAIL,
            self::CODE_INVALID_PARKING_NO_OR_RACK_NO,
            self::CODE_INVALID_PARKING_PIN_CODE,
            self::CODE_INCORRECT_CURRENCY,
            self::CODE_INCORRECT_CARD_NUMBER,
            self::CODE_INCORRECT_AMOUNT,
            self::CODE_INCORRECT_MERCHANT_ID,
            self::CODE_INCORRECT_PRODUCT_ID,
            self::CODE_INCORRECT_EXPORT_DATA_DATE_RANGE,
            self::CODE_INCORRECT_STATUS,
            self::CODE_PROVIDER_RESPONSE_RESULT_FAILED,
            self::CODE_NO_SUCH_TOKEN,
            self::CODE_DUPLICATE_ORDER_NO,
            self::CODE_DUPLICATE_SHOP_NO,
            self::CODE_DUPLICATE_CONTRACT_NUMBER,
            self::CODE_DUPLICATE_EMAIL,
            self::CODE_DUPLICATE_LEGAL_REGISTRATION_NO,
            self::CODE_DUPLICATE_KEY,
            self::CODE_DUPLICATE_CATEGORY_NAME,
            self::CODE_EXPIRED_CARD,
            self::CODE_CARD_DECLINED,
            self::CODE_PROCESSING_CARD_ERROR,
            self::CODE_REQUIRED_KEY,
            self::CODE_CHARGE_ALREADY_CAPTURED,
            self::CODE_CHARGE_ALREADY_REFUNDED,
            self::CODE_REFUSED_REFUND,
            self::CODE_REFUSED_REFUND_CONSTRAINT_DAY,
            self::CODE_REFUSED_REFUND_NON_CAPTURED,
            self::CODE_INACTIVE_APPLICATION,
            self::CODE_INACTIVE_PAYMENT_METHOD,
            self::CODE_INACTIVE_PRODUCT,
            self::CODE_EXIST_PAYMENT_METHOD,
            self::CODE_CAMPAIGN_ALREADY_STARTED,
            self::CODE_OVER_SHOP_LIMIT_COUNT,
            self::CODE_OVER_PRODUCT_LIMIT_COUNT,
            self::CODE_PROCESS_ERROR,
            self::CODE_API_CONNECTION_ERROR,
            self::CODE_PROVIDER_CONFIG_ERROR,
            self::CODE_API_ERROR,
            self::CODE_FORBIDDEN,
            self::CODE_FORBIDDEN_CLOSE_SELF,
            self::CODE_RECAPTCHA_FAIL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type エラーコードとメッセージ
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code エラーコード
     *
     * @return $this
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($code) && !in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message エラーメッセージ
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


